from datetime import datetime
import enum
from sqlalchemy import Column, DateTime, Float, Integer, String, ForeignKey, Table, Enum
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from .database import Base

class TradeType(enum.Enum):
    Sell = 1
    Buy = 2

### Explanation
# 1. **Users Table**: Centralizes user accounts for better management.
# 2. **Predictions Table**: Stores independent predictions generated by the AI models.
# 3. **Orders Table**: Separates user-triggered trades from AI-triggered trades while tracking execution details.
# 4. **Next Trades Table**: Lists actionable opportunities for the frontend to show users the best AI-driven trade options.
#      Each suggested trade has an associated **probability** and **expiry** to ensure relevance.

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    password = Column(String)
    name = Column(String, index=True)
    last_name = Column(String, index=True)
    phone = Column(String, index=True)
    email = Column(String, unique=True, index=True)
    #it has to be set up with SqlAlchemy Datetime to set the value in the server side
    created_at = Column(DateTime(timezone=True), server_default=func.current_date())

# **Predictions Table**
#    Stores AI/ML-generated predictions independently from trades.

# | Column           | Type           | Description                             |
# |------------------|----------------|-----------------------------------------|
# | prediction_id    | INT (PK)       | Unique ID for each prediction           |
# | symbol           | VARCHAR(10)    | Stock/Asset ticker symbol               |
# | predicted_price  | FLOAT          | Predicted price or value                |
# | probability      | FLOAT          | Confidence level (0-1)                  |
# | prediction_date  | TIMESTAMP      | Date and time of prediction             |
# | created_at       | TIMESTAMP      | When the prediction was generated       |
class Prediction(Base):
    __tablename__ = "predictions"

    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(5), index=True)
    predicted_price = Column(Float(4), index=True)
    probability = Column(Float(4), index=True)
    prediction_date = Column(DateTime(timezone=True), server_default=func.current_date())
    created_at = Column(DateTime(timezone=True), server_default=func.current_date())

# Order_trade_association = Table(
#     'Order_trade', Base.metadata,
#     Column('Order_id', Integer, ForeignKey('order.id')),
#     Column('trade_id', Integer, ForeignKey('trade.id')),
# )

# **Orders Table**
#    Tracks user trades, triggered by users or based on predictions.

# | Column           | Type           | Description                             |
# |------------------|----------------|-----------------------------------------|
# | id               | INT (PK)       | Unique trade ID                         |
# | user_id          | INT (FK)       | User executing the trade                |
# | symbol           | VARCHAR(10)    | Asset ticker symbol                     |
# | trade_action     | VARCHAR(10)    | BUY/SELL                                |
# | quantity         | INT            | Number of assets traded                 |
# | trade_price      | FLOAT          | Price at which trade was executed       |
# | trade_date       | TIMESTAMP      | Date and time of trade                  |
# | prediction_id    | INT (FK)       | Associated prediction (optional)        |
# | trigger_type     | VARCHAR(20)    | USER_TRIGGERED / AI_TRIGGERED           |
class Order(Base):
    __tablename__ = "orders"
    id = Column(Integer, primary_key=True, index=True, autoincrement='auto')
    user_id = Column(Integer,ForeignKey('users.id'))
    trade_action = Column(Enum(TradeType), index=True, default=2) #BUY/SELL
    quantity = Column(Integer, index=True)
    trade_price = Column(Integer, index=True)
    trade_date = Column(DateTime(timezone=True), server_default=func.current_date())
    baseCoin = Column(String, index=True)
    quoteCoin = Column(String, index=True)
    prediction_id = Column(Integer,ForeignKey('predictions.id'))
    trigger_type = Column(String(4), index=True)
    # trade = relationship('Trade', secondary=trade_trades_association, back_populates='trades')

# **Next Trades Table**
#    Lists AI-recommended actions with probabilities and timestamps.

# | Column           | Type           | Description                             |
# |------------------|----------------|-----------------------------------------|
# | trade_id         | INT (PK)       | Unique ID for the next trade            |
# | prediction_id    | INT (FK)       | Reference to the prediction             |
# | symbol           | VARCHAR(10)    | Stock/Asset ticker symbol               |
# | trade_action     | VARCHAR(10)    | BUY/SELL                                |
# | suggested_price  | FLOAT          | Price at which action is recommended    |
# | probability      | FLOAT          | AI probability of success (0-1)         |
# | created_at       | TIMESTAMP      | Time when the suggestion was made       |
# | expiry_at        | TIMESTAMP      | Validity period for the suggested trade |
class Trade(Base):
    __tablename__ = "trades"

    id = Column(Integer, primary_key=True, index=True)
    prediction_id = Column(Integer,ForeignKey('predictions.id'))
    trade_id = Column(Integer,ForeignKey('trades.id'))

    symbol = Column(String(5), index=True)
    baseCoin = Column(String, index=True)
    quoteCoin = Column(String, index=True)
 
    trade_action = Column(String(4), index=True) #BUY/SELL
    suggested_price = Column(Float(4), index=True)

    probability = Column(Float(4), index=True)
    created_at = Column(DateTime(timezone=True), server_default=func.current_date())
    expiry_at = Column(DateTime(timezone=True), server_default=func.current_date())
#   trade = relationship('Trade', secondary=trade_trades_association, back_populates='trade')

# Trade.trade = relationship('Trade', secondary=trade_trades_association, back_populates='trade')
